import sys
import subprocess
import os

def install_packages():
    """–ò–Ω—Å—Ç–∞–ª–∏—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏—Ç–µ –ø–∞–∫–µ—Ç–∏, –∞–∫–æ –Ω–µ —Å–∞ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–∏"""
    packages = ['pandas', 'openpyxl', 'requests']
    
    for package in packages:
        try:
            __import__(package)
            print(f"‚úÖ {package} –µ –≤–µ—á–µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω")
        except ImportError:
            print(f"üì¶ –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ –Ω–∞ {package}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])

def main():
    print("=" * 70)
    print("BFSA Excel –ï–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä - –ù–∞—Å—Ç—Ä–æ–π–≤–∞–Ω–µ –Ω–∞ —Å—Ä–µ–¥–∞—Ç–∞...")
    print("=" * 70)
    
    # –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏—Ç–µ –ø–∞–∫–µ—Ç–∏
    install_packages()
    
    print("\n" + "=" * 70)
    print("–°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ BFSA Excel –ï–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä...")
    print("=" * 70)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏—è —Å–∫—Ä–∏–ø—Ç
    from bfsa_main import BFSAExcelExtractor
    
    # –í–∞—à–∏—è—Ç —Ç–æ–∫–µ–Ω –∑–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è–≤–∞–Ω–µ
    print("\nüîê –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∏—è —Ç–æ–∫–µ–Ω –∑–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è–≤–∞–Ω–µ:")
    print("1. –û—Ç–∏–¥–µ—Ç–µ –Ω–∞ https://epord.bfsa.bg/")
    print("2. –í–ª–µ–∑—Ç–µ –≤ –∞–∫–∞—É–Ω—Ç–∞ —Å–∏")
    print("3. –ù–∞—Ç–∏—Å–Ω–µ—Ç–µ F12 –∑–∞ –¥–∞ –æ—Ç–≤–æ—Ä–∏—Ç–µ Developer Tools")
    print("4. –û—Ç–∏–¥–µ—Ç–µ –Ω–∞ —Ä–∞–∑–¥–µ–ª–∞ Network")
    print("5. –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ —Ñ–∏–ª—Ç—ä—Ä–∞ –∑–∞ –¥–∞—Ç–∏ –Ω–∞ —Å–∞–π—Ç–∞")
    print("6. –ù–∞–º–µ—Ä–µ—Ç–µ –Ω—è–∫–æ–π API –∑–∞—è–≤–∫–∞ –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ 'Authorization' —Ö–µ–¥—ä—Ä–∞")
    print("7. –ü–æ—Å—Ç–∞–≤–µ—Ç–µ –≤–∞—à–∏—è —Ç–æ–∫–µ–Ω —Ç—É–∫ (–∑–∞–ø–æ—á–≤–∞ —Å 'eyJ...'):")
    
    auth_token = input("–¢–æ–∫–µ–Ω: ").strip()
    
    if not auth_token:
        print("‚ùå –ù–µ –µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–µ–Ω —Ç–æ–∫–µ–Ω. –ò–∑–ª–∏–∑–∞–Ω–µ.")
        return
    
    extractor = BFSAExcelExtractor(auth_token)
    
    # –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–µ—Ä–∏–æ–¥ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
    print("\nüìÖ –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –ø–µ—Ä–∏–æ–¥ –∑–∞ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏:")
    print("   –§–æ—Ä–º–∞—Ç: YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-01)")
    
    start_date = input("–ù–∞—á–∞–ª–Ω–∞ –¥–∞—Ç–∞ (YYYY-MM-DD): ").strip()
    end_date = input("–ö—Ä–∞–π–Ω–∞ –¥–∞—Ç–∞ (YYYY-MM-DD): ").strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∞—Ç–∏—Ç–µ
    try:
        from datetime import datetime
        datetime.strptime(start_date, '%Y-%m-%d')
        datetime.strptime(end_date, '%Y-%m-%d')
    except ValueError:
        print("‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–∞ –¥–∞—Ç–∞—Ç–∞! –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ YYYY-MM-DD")
        return
    
    if start_date >= end_date:
        print("‚ùå –ù–∞—á–∞–ª–Ω–∞—Ç–∞ –¥–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø—Ä–µ–¥–∏ –∫—Ä–∞–π–Ω–∞—Ç–∞ –¥–∞—Ç–∞!")
        return
    
    print(f"\nüìÖ –ü–µ—Ä–∏–æ–¥: {start_date} –¥–æ {end_date}")
    print("‚è∞ –¢–æ–≤–∞ –º–æ–∂–µ –¥–∞ –æ—Ç–Ω–µ–º–µ –Ω—è–∫–æ–ª–∫–æ –º–∏–Ω—É—Ç–∏...")
    print()
    
    input("–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—Ç–µ –∏–∑–≤–ª–∏—á–∞–Ω–µ—Ç–æ...")
    
    try:
        extractor.create_excel_report(start_date, end_date)
    except Exception as e:
        print(f"\nüí• –ì—Ä–µ—à–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –∏–∑—Ö–æ–¥...")
    input()

if __name__ == "__main__":
    main()