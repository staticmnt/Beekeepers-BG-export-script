import requests
import pandas as pd
from datetime import datetime, timedelta
import time
import os

class BFSAExcelExtractor:
    def __init__(self, auth_token):
        self.session = requests.Session()
        self.base_url = "https://epord.bfsa.bg"
        self.headers = {
            'accept': 'application/json, text/plain, */*',
            'authorization': f'Bearer {auth_token}',
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'referer': 'https://epord.bfsa.bg/'
        }
    
    def date_to_timestamp(self, date_str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞ YYYY-MM-DD –≤ Unix timestamp"""
        dt = datetime.strptime(date_str, '%Y-%m-%d')
        return int(dt.timestamp())
    
    def timestamp_to_bulgarian_date(self, timestamp):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞ Unix timestamp –≤ –±—ä–ª–≥–∞—Ä—Å–∫–∏ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY"""
        try:
            if isinstance(timestamp, str):
                timestamp = int(timestamp)
            return datetime.fromtimestamp(timestamp).strftime('%d.%m.%Y')
        except (ValueError, TypeError):
            return "–ù–µ–≤–∞–ª–∏–¥–Ω–∞ –¥–∞—Ç–∞"
    
    def get_date_range_string(self, start_timestamp, end_timestamp):
        """–°—ä–∑–¥–∞–≤–∞ –Ω–∏–∑ —Å –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç –¥–∞—Ç–∏ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç 'DD.MM.YYYY - DD.MM.YYYY'"""
        start_date = self.timestamp_to_bulgarian_date(start_timestamp)
        end_date = self.timestamp_to_bulgarian_date(end_timestamp)
        
        if start_date != "–ù–µ–≤–∞–ª–∏–¥–Ω–∞ –¥–∞—Ç–∞" and end_date != "–ù–µ–≤–∞–ª–∏–¥–Ω–∞ –¥–∞—Ç–∞":
            return f"{start_date} - {end_date}"
        else:
            return ""
    
    def get_events_for_period(self, start_date, end_date):
        """–í–∑–µ–º–∞ –≤—Å–∏—á–∫–∏ —Å—ä–±–∏—Ç–∏—è –∑–∞ –¥–∞–¥–µ–Ω –ø–µ—Ä–∏–æ–¥"""
        url = f"{self.base_url}/api/events"
        params = {
            'from': self.date_to_timestamp(start_date),
            'to': self.date_to_timestamp(end_date),
            'all': 1,
            'page': 0,
            'size': 1000
        }
        
        print(f"üìÖ –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏—è: {start_date} –¥–æ {end_date}")
        
        try:
            response = self.session.get(url, params=params, headers=self.headers, timeout=60)
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get('status') == 'success' and 'data' in data:
                    events_data = data['data']
                    items = events_data.get('items', [])
                    
                    print(f"‚úÖ –ù–∞–º–µ—Ä–µ–Ω–∏ {len(items)} —Å—ä–±–∏—Ç–∏—è")
                    return items
            
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –æ—Ç API: {response.status_code}")
            return []
            
        except Exception as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞: {e}")
            return []
    
    def extract_data_to_dataframe(self, start_date, end_date):
        """–ò–∑–≤–ª–∏—á–∞ –¥–∞–Ω–Ω–∏ –∏ –≥–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞ –≤ DataFrame —Å –±—ä–ª–≥–∞—Ä—Å–∫–∏ –∫–æ–ª–æ–Ω–∏"""
        print("=" * 70)
        print("üìä –ò–ó–í–õ–ò–ß–ê–ù–ï –ù–ê –î–ê–ù–ù–ò –ó–ê EXCEL")
        print("=" * 70)
        
        all_events_data = []
        
        # –û–±—Ä–∞–±–æ—Ç–≤–∞–Ω–µ –Ω–∞ –ø–æ-–º–∞–ª–∫–∏ –ø–∞—Ä—Ç–∏–¥–∏ –∑–∞ –¥–∞ —Å–µ –∏–∑–±–µ–≥–Ω–µ timeout
        current_start = datetime.strptime(start_date, '%Y-%m-%d')
        end_dt = datetime.strptime(end_date, '%Y-%m-%d')
        
        batch_count = 0
        
        while current_start < end_dt:
            batch_count += 1
            batch_end = current_start + timedelta(days=60)
            if batch_end > end_dt:
                batch_end = end_dt
            
            batch_start_str = current_start.strftime('%Y-%m-%d')
            batch_end_str = batch_end.strftime('%Y-%m-%d')
            
            print(f"üîÑ –ü–∞—Ä—Ç–∏–¥–∞ {batch_count}: {batch_start_str} –¥–æ {batch_end_str}")
            
            events = self.get_events_for_period(batch_start_str, batch_end_str)
            
            for event in events:
                # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –¥–∞—Ç–∞—Ç–∞
                start_timestamp = event.get('start_date')
                end_timestamp = event.get('end_date')
                date_range = self.get_date_range_string(start_timestamp, end_timestamp)
                
                # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                block_name = event.get('block', {}).get('name', '')
                area = event.get('area', '')
                crop = event.get('crop', '')
                status = event.get('status', '')
                
                # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
                centroid = event.get('block', {}).get('centroid', {})
                coordinates = centroid.get('coordinates', [])
                gps = ""
                if len(coordinates) >= 2:
                    gps = f"{coordinates[0]}, {coordinates[1]}"
                
                # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∏—Ç–µ
                products = event.get('products', [])
                
                if products:
                    for product in products:
                        product_name = product.get('name', '')
                        active_content = product.get('active_content', '')
                        dose = product.get('dose', '')
                        
                        event_data = {
                            '–î–∞—Ç–∞': date_range,
                            '–ë–ª–æ–∫': block_name,
                            '–ü–ª–æ—â': area,
                            '–ö—É–ª—Ç—É—Ä–∞': crop,
                            '–°—Ç–∞—Ç—É—Å': status,
                            '–ü—Ä–µ–ø–∞—Ä–∞—Ç': product_name,
                            '–ê–∫—Ç–∏–≤–Ω–æ –≤–µ—â–µ—Å—Ç–≤–æ': active_content,
                            '–î–æ–∑–∞': dose,
                            'GPS': gps
                        }
                        all_events_data.append(event_data)
                else:
                    event_data = {
                        '–î–∞—Ç–∞': date_range,
                        '–ë–ª–æ–∫': block_name,
                        '–ü–ª–æ—â': area,
                        '–ö—É–ª—Ç—É—Ä–∞': crop,
                        '–°—Ç–∞—Ç—É—Å': status,
                        '–ü—Ä–µ–ø–∞—Ä–∞—Ç': '',
                        '–ê–∫—Ç–∏–≤–Ω–æ –≤–µ—â–µ—Å—Ç–≤–æ': '',
                        '–î–æ–∑–∞': '',
                        'GPS': gps
                    }
                    all_events_data.append(event_data)
            
            print(f"‚úÖ –ü–∞—Ä—Ç–∏–¥–∞ {batch_count} –∑–∞–≤—ä—Ä—à–µ–Ω–∞: {len(events)} —Å—ä–±–∏—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–µ–Ω–∏")
            
            current_start = batch_end + timedelta(days=1)
            time.sleep(1)
        
        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ DataFrame
        df = pd.DataFrame(all_events_data)
        
        print(f"\nüéØ –û–±—â–æ —Ä–µ–¥–æ–≤–µ –≤ Excel: {len(df)}")
        return df
    
    def save_to_excel(self, df, filename):
        """–ó–∞–ø–∞–∑–≤–∞ DataFrame –≤—ä–≤ Excel —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ"""
        try:
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='–°—ä–±–∏—Ç–∏—è', index=False)
                
                workbook = writer.book
                worksheet = writer.sheets['–°—ä–±–∏—Ç–∏—è']
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–≤–∞–Ω–µ –Ω–∞ —à–∏—Ä–∏–Ω–∞—Ç–∞ –Ω–∞ –∫–æ–ª–æ–Ω–∏—Ç–µ
                for column in worksheet.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                    adjusted_width = min(max_length + 2, 50)
                    worksheet.column_dimensions[column_letter].width = adjusted_width
                
                worksheet.freeze_panes = 'A2'
            
            print(f"üìÅ Excel —Ñ–∞–π–ª –∑–∞–ø–∞–∑–µ–Ω: {filename}")
            return True
            
        except Exception as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ Excel: {e}")
            return False
    
    def create_excel_report(self, start_date, end_date):
        """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ Excel –æ—Ç—á–µ—Ç"""
        print("üöÄ –ó–∞–ø–æ—á–≤–∞ –∏–∑–≤–ª–∏—á–∞–Ω–µ—Ç–æ –Ω–∞ –¥–∞–Ω–Ω–∏...")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} –¥–æ {end_date}")
        print("‚è∞ –¢–æ–≤–∞ –º–æ–∂–µ –¥–∞ –æ—Ç–Ω–µ–º–µ –Ω—è–∫–æ–ª–∫–æ –º–∏–Ω—É—Ç–∏...")
        print()
        
        # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –≤ DataFrame
        df = self.extract_data_to_dataframe(start_date, end_date)
        
        if df.empty:
            print("‚ùå –ù–µ —Å–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ —Ç–æ–∑–∏ –ø–µ—Ä–∏–æ–¥")
            return
        
        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∏–º–µ –Ω–∞ —Ñ–∞–π–ª —Å timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M")
        excel_filename = f"BFSA_–°—ä–±–∏—Ç–∏—è_{timestamp}.xlsx"
        
        # –ó–∞–ø–∞–∑–≤–∞–Ω–µ –≤ Excel
        print(f"\nüíæ –ó–∞–ø–∞–∑–≤–∞–Ω–µ –≤—ä–≤ Excel —Ñ–∞–π–ª...")
        success = self.save_to_excel(df, excel_filename)
        
        if success:
            print(f"\nüéâ –£–°–ü–ï–®–ù–û –ó–ê–í–™–†–®–í–ê–ù–ï!")
            print(f"üìä –§–∞–π–ª: {excel_filename}")
            print(f"üìà –û–±—â–æ —Ä–µ–¥–æ–≤–µ: {len(df)}")
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} –¥–æ {end_date}")
            
            # –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print(f"\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª–Ω–∏ –±–ª–æ–∫–æ–≤–µ: {df['–ë–ª–æ–∫'].nunique()}")
            print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª–Ω–∏ –∫—É–ª—Ç—É—Ä–∏: {df['–ö—É–ª—Ç—É—Ä–∞'].nunique()}")
            print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª–Ω–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∏: {df['–ü—Ä–µ–ø–∞—Ä–∞—Ç'].nunique()}")
            print(f"   ‚Ä¢ –°—ä–±–∏—Ç–∏—è —Å GPS: {df[df['GPS'] != ''].shape[0]}")
            
            if not df.empty:
                print(f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä –∑–∞ –¥–∞—Ç–∞: {df['–î–∞—Ç–∞'].iloc[0]}")
        else:
            print("‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ Excel —Ñ–∞–π–ª")